/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

function CreatePlayPauseControls(controlBoxID, frontID, onclickBack, onclickPlay, onclickPause, onclickNext)
{
    var boxElement = document.getElementById(controlBoxID);
    if (!boxElement.loaded) {
        boxElement.loaded = true;
        try { onclick = eval(onclick); } catch (e) { onclick = null; }
        boxElement.object = new PlayPauseControls(boxElement, document.getElementById(frontID), onclickBack, onclickPlay, onclickPause, onclickNext);
        return boxElement.object;
    }
}

function CreateCaptionControl(captionID, frontID, wantMouseover)
{
    var captionElement = document.getElementById(captionID);
    if (!captionElement.loaded) {
        captionElement.loaded = true;
        captionElement.object = new CaptionControl(captionElement, document.getElementById(frontID), wantMouseover);
        return captionElement.object;
    }
}

function ControlButton(container, width, height, imgPath, imgClickedPath, onclick)
{
    this.onclick = onclick;

    this._imgPath = imgPath;
    this._imgClickedPath = imgClickedPath;

    this._container = container;

    var _self = this;
    this._mousedownHandler = function(event) { _self._mousedown(event); }
    this._surpressHandler = function(event)
    {
        event.stopPropagation();
        event.preventDefault();
    }
    this._mouseoverHandler = function(event) { _self._mouseover(event); }
    this._mouseoutHandler = function(event) { _self._mouseout(event); }
    this._mouseupHandler = function(event) { _self._mouseup(event); }

    var element = document.createElement("div");
    var style = element.style;
    style.display = "inline-block";
    style.background = "url(" + this._imgPath + ") no-repeat top left";
    style.height = height + "px";
    style.width = width + "px";
    element.addEventListener("mousedown", this._mousedownHandler, true);
    container.appendChild(element);

    this._element = element;

    this.setEnabled(false);

    // preload clicked image
    var img = new Image(width, height);
    img.src = this._imgClickedPath;
}

ControlButton.prototype.enabled = function()
{
    return this._enabled;
}

ControlButton.prototype.setEnabled = function(enable)
{
    this._enabled = enable;
}

ControlButton.prototype.setImages = function(imgPath, imgClickedPath)
{
    this._imgPath = imgPath;
    this._imgClickedPath = imgClickedPath;

    this._element.style.backgroundImage = "url(" + this._imgPath + ")";
}

ControlButton.prototype.hide = function()
{
    this._element.style.display = "none";
}

ControlButton.prototype.show = function()
{
    this._element.style.display = "inline-block";
}

ControlButton.prototype.keyClick = function(event)
{
    if (this.enabled()) {
        if (this._keyClickTimer != null) {
            clearTimeout(this._keyClickTimer);
        }

        this._setPressed(true);

        var _self = this;
        this._keyClickTimer = setTimeout(function ()
        {
            _self._setPressed(false);
            delete _self._keyClickTimer;
        }, 250);

        if (this.onclick != null) {
            this.onclick(event);
        }
    }
}

ControlButton.prototype._mousedown = function(event)
{
    // If we're disabled, don't do anything
    if (!this.enabled())
    {
        event.stopPropagation();
        event.preventDefault();
        return;
    }

    // Change images to clicked state
    this._setPressed(true);

    // add temp event listeners
    //document.addEventListener("mousemove", this._surpressHandler, true);
    //document.addEventListener("mouseout", this._surpressHandler, true);
    document.addEventListener("mouseup", this._mouseupHandler, true);
    this._element.addEventListener("mouseover", this._mouseoverHandler, true);
    this._element.addEventListener("mouseout", this._mouseoutHandler, true);

    this._inside = true;

    event.stopPropagation();
    event.preventDefault();
}

ControlButton.prototype._mouseover = function(event)
{
    // Change images to clicked state
    this._setPressed(true);

    this._inside = true;

    event.stopPropagation();
    event.preventDefault();
}

ControlButton.prototype._mouseout = function(event)
{
    // Change images to regular state
    this._setPressed(false);

    this._inside = false;

    event.stopPropagation();
    event.preventDefault();
}

ControlButton.prototype._mouseup = function(event)
{
    // Change images to regular state
    this._setPressed(false);

    // Remove temp event listeners
    //document.removeEventListener("mousemove", this._surpressHandler, true);
    //document.removeEventListener("mouseout", this._surpressHandler, true);
    document.removeEventListener("mouseup", this._mouseupHandler, true);
    this._element.removeEventListener("mouseover", this._mouseoverHandler, true);
    this._element.removeEventListener("mouseout", this._mouseoutHandler, true);

    // Perform callback if we're inside the button
    try {
        if (this._inside && this.onclick != null)
            this.onclick(event);
    } catch(ex) {
        throw ex;
    } finally {
        event.stopPropagation();
        event.preventDefault();
        delete this._inside;
    }
}

ControlButton.prototype._setPressed = function(pressed)
{
    if (pressed)
    {
        this._element.style.backgroundImage = "url(" + this._imgClickedPath + ")";
    }
    else
    {
        this._element.style.backgroundImage = "url(" + this._imgPath + ")";
    }
}

function PlayPauseControls(controlBox, front, onclickBack, onclickPlay, onclickPause, onclickNext)
{
    /* Read-write properties */
    this.onclick = onclick;

    /* Internal */
    this._front = front;
    this._controlBox = controlBox;

    height = 32;
    this._imgBackPath          = "Images/bezel_previous_off.png";
    this._imgBackClickedPath   = "Images/bezel_previous_on.png";
    this._imgBackWidth         = 24;
    this._imgPlayPath          = "Images/bezel_play_off.png";
    this._imgPlayClickedPath   = "Images/bezel_play_on.png";
    this._imgPlayWidth         = 23;
    this._imgPausePath         = "Images/bezel_pause_off.png";
    this._imgPauseClickedPath  = "Images/bezel_pause_on.png";
    this._imgPauseWidth        = this._imgPlayWidth;
    this._imgNextPath          = "Images/bezel_next_off.png";
    this._imgNextClickedPath   = "Images/bezel_next_on.png";
    this._imgNextWidth         = 24;

    var _self = this;

    // XXX
    this._backHandler = function(event) { _self._back(event, onclickBack); }
    this._playHandler = function(event) { _self._play(event, onclickPlay); }
    this._pauseHandler = function(event) { _self._pause(event, onclickPause); }
    this._nextHandler = function(event) { _self._next(event, onclickNext); }

    this._updateOpacity = function(animation, now, first, done)
    {
        _self._controlBox.style.opacity = now;
    }

    this._animationComplete = function()
    {
        delete _self._animation;
        delete _self._animator;
    }

    this._frontMove = function(event)
    {
        if (_self._outdelay !== undefined)
        {
            clearTimeout(_self._outdelay);
            delete _self._outdelay;
        }
        if (_self._shown)
            return;

        var from = 0.0;
        var duration = 500;
        if (_self._animation !== undefined)
        {
            from = _self._animation.now;
            duration = (new Date).getTime() - _self._animator.startTime;
            _self._animator.stop();
        }

        _self._shown = true;

        var animator = new AppleAnimator(duration, 13);
        animator.oncomplete = _self._animationComplete;
        _self._animator = animator;

        _self._animation = new AppleAnimation(from, 1.0, _self._updateOpacity);
        animator.addAnimation(_self._animation);
        animator.start();
    }

    this._frontOutDelay = function(event)
    {
        if (_self._outdelay === undefined)
        {
            _self._outdelay = setTimeout(_self._frontOut, 0, _self);
        }
    }

    this._frontOut = function(_self)
    {
        if (_self._outdelay !== undefined)
        {
            clearTimeout(_self._outdelay);
            delete _self._outdelay;
        }
        if (!_self._shown)
            return;

        var from = 1.0;
        var duration = 500;
        if (_self._animation !== undefined)
        {
            from = _self._animation.now;
            duration = (new Date).getTime() - _self._animator.startTime;
            _self._animator.stop();
        }

        var animator = new AppleAnimator(duration, 13);
        animator.oncomplete = _self._animationComplete;
        _self._animator = animator;

        _self._animation = new AppleAnimation(from, 0.0, _self._updateOpacity);
        animator.addAnimation(_self._animation);
        animator.start();

        _self._shown = false;
    }

    this._backButton = new ControlButton(controlBox, this._imgBackWidth, height, this._imgBackPath, this._imgBackClickedPath, this._backHandler);
    this._playButton = new ControlButton(controlBox, this._imgPlayWidth, height, this._imgPlayPath, this._imgPlayClickedPath, this._playHandler);
    this._nextButton = new ControlButton(controlBox, this._imgNextWidth, height, this._imgNextPath, this._imgNextClickedPath, this._nextHandler);

    // Preload pause images
    var img = new Image(this._imgPauseWidth, height);
    img.src = this._imgPausePath;
    img = new Image(this._imgPauseWidth, height);
    img.src = this._imgPauseClickedPath;

    var style = controlBox.style;
    style.appleDashboardRegion = "dashboard-region(control rectangle)";
    style.height = height + "px";
    style.width = (this._imgBackWidth + this._imgPlayWidth + this._imgNextWidth) + "px";
    style.opacity = 0.0;

    this.setEnabled(false);

    this._front.addEventListener("mousemove", this._frontMove, true);
    this._front.addEventListener("mouseout", this._frontOutDelay, true);
}

PlayPauseControls.prototype.enabled = function()
{
    return this._enabled;
}

PlayPauseControls.prototype.setEnabled = function(enable)
{
    this._enabled = enable;
    this._backButton.setEnabled(enable);
    this._playButton.setEnabled(enable);
    this._nextButton.setEnabled(enable);
}

PlayPauseControls.prototype.hide = function()
{
    this._controlBox.style.display = "none";
}

PlayPauseControls.prototype.show = function()
{
    this._controlBox.style.display = "block";
}

PlayPauseControls.prototype.setPaused = function (pauseMode)
{
    if (pauseMode) {
        // When paused, show the play button
        this._playButton.setImages(this._imgPlayPath, this._imgPlayClickedPath);
        this._playButton.onclick = this._playHandler;
    }
    else {
        // When playing, show the pause button
        this._playButton.setImages(this._imgPausePath, this._imgPauseClickedPath);
        this._playButton.onclick = this._pauseHandler;
    }
}

PlayPauseControls.prototype.setShowPlayButton = function (show)
{
    // Show or hide the play/pause button
    if(!show) this._playButton.hide();
    else this._playButton.show();
}

PlayPauseControls.prototype.keyClickBack = function (event)
{
    this._backButton.keyClick(event);
}

PlayPauseControls.prototype.keyClickNext = function (event)
{
    this._nextButton.keyClick(event);
}

PlayPauseControls.prototype.keyClickPlay = function (event)
{
    this._playButton.keyClick(event);
}

PlayPauseControls.prototype._back = function(event, onclick)
{
    if (onclick != null) {
        onclick();
    }
}

PlayPauseControls.prototype._play = function(event, onclick)
{
    this.setPaused(false);

    if (onclick != null) {
        onclick();
    }
}

PlayPauseControls.prototype._pause = function(event, onclick)
{
    this.setPaused(true);

    if (onclick != null) {
        onclick();
    }
}

PlayPauseControls.prototype._next = function(event, onclick)
{
    if (onclick != null) {
        onclick();
    }
}

function CaptionControl(captionBox, front, wantMouseover)
{
    /* Internal */
    this._front = front;
    this._captionBox = captionBox;
    this._wantMouseover = wantMouseover;

    var _self = this;

    this._updateOpacity = function(animation, now, first, done)
    {
        _self._captionBox.style.opacity = now * 0.75;
    }

    this._animationComplete = function()
    {
        delete _self._animation;
        delete _self._animator;
    }

    this._frontMove = function(event)
    {
        if (_self._outdelay !== undefined)
        {
            clearTimeout(_self._outdelay);
            delete _self._outdelay;
        }
        if (_self._shown)
            return;

        var from = 0.0;
        var duration = 500;
        if (_self._animation !== undefined)
        {
            from = _self._animation.now;
            duration = (new Date).getTime() - _self._animator.startTime;
            _self._animator.stop();
        }

        _self._shown = true;

        var animator = new AppleAnimator(duration, 13);
        animator.oncomplete = _self._animationComplete;
        _self._animator = animator;

        _self._animation = new AppleAnimation(from, 1.0, _self._updateOpacity);
        animator.addAnimation(_self._animation);
        animator.start();
    }

    this._frontOutDelay = function(event)
    {
        if (_self._outdelay === undefined)
        {
            _self._outdelay = setTimeout(_self._frontOut, 0, _self);
        }
    }

    this._frontOut = function(_self)
    {
        if (_self._outdelay !== undefined)
        {
            clearTimeout(_self._outdelay);
            delete _self._outdelay;
        }
        if (!_self._shown)
            return;

        var from = 1.0;
        var duration = 500;
        if (_self._animation !== undefined)
        {
            from = _self._animation.now;
            duration = (new Date).getTime() - _self._animator.startTime;
            _self._animator.stop();
        }

        var animator = new AppleAnimator(duration, 13);
        animator.oncomplete = _self._animationComplete;
        _self._animator = animator;

        _self._animation = new AppleAnimation(from, 0.0, _self._updateOpacity);
        animator.addAnimation(_self._animation);
        animator.start();

        _self._shown = false;
    }

    if (wantMouseover) {
        captionBox.style.opacity = 0.0;
        this._front.addEventListener("mousemove", this._frontMove, true);
        this._front.addEventListener("mouseout", this._frontOutDelay, true);
    }
}

CaptionControl.prototype.hide = function()
{
    this._captionBox.style.display = "none";
}

CaptionControl.prototype.show = function()
{
    this._captionBox.style.display = "block";
}

CaptionControl.prototype.setCaption = function(captionText)
{
    if (this._captionBox != null) {
        this._captionBox.innerText = captionText;
    }
}
