/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

function PhotoView(container)
{
    var div = document.createElement("div");
    var img = document.createElement("img");
    div.appendChild(img);
    container.appendChild(div);

    this.box = container;
    this.div = div;
    this.img = img;

    this.initStyle();
}

PhotoView.prototype.initStyle = function ()
{
    var boxStyle = document.defaultView.getComputedStyle(this.box, "");

    this.div.style.position = "absolute";
    this.div.style.width = boxStyle.width;
    this.div.style.height = boxStyle.height;
    this.div.style.backgroundColor = boxStyle.backgroundColor;
    this.resetSizeAndPosition();
}

PhotoView.prototype.correctAspect = function ()
{
    var boxStyle = document.defaultView.getComputedStyle(this.box, '');

    var boxHeight = parseInt(boxStyle.height);
    var boxWidth  = parseInt(boxStyle.width);
    var boxAspect = boxHeight / boxWidth;
    var imgAspect = this.image.height / this.image.width;

    var w = boxWidth;
    var h = boxHeight;
    var x = 0;
    var y = 0;

    if (imgAspect > boxAspect) {
        // Tall
        var ratio = boxHeight / this.image.height;
        w = Math.round(this.image.width * ratio);
        h = Math.round(this.image.height * ratio);
        x = Math.floor((boxWidth - w) / 2);
    }
    else if (imgAspect < boxAspect) {
        // Wide
        var ratio = boxWidth / this.image.width;
        w = Math.round(this.image.width * ratio);
        h = Math.round(this.image.height * ratio);
        y = Math.floor((boxHeight - h) / 2);
    }

    this.img.style.width = w + "px";
    this.img.style.height = h + "px";
    this.img.style.marginTop = y + "px";
    this.img.style.marginLeft = x + "px";
}

PhotoView.prototype.setImage = function (image)
{
    this.image = image;
    this.img.src = image.src;
    this.correctAspect();
}

PhotoView.prototype.setZIndex = function (zIndex)
{
    this.div.style.zIndex = zIndex;
}

PhotoView.prototype.upper = function ()
{
    this.setZIndex(1);
}

PhotoView.prototype.lower = function ()
{
    this.setZIndex(0);
}

PhotoView.prototype.show = function ()
{
    this.div.style.visibility = "visible";
}

PhotoView.prototype.hide = function ()
{
    this.div.style.visibility = "hidden";
}

PhotoView.prototype.upperShown = function ()
{
    this.upper();
    this.show();
}

PhotoView.prototype.upperHidden = function ()
{
    this.hide();
    this.upper();
}

PhotoView.prototype.lowerShown = function ()
{
    this.lower();
    this.show();
}

PhotoView.prototype.lowerHidden = function ()
{
    this.hide();
    this.lower();
}

PhotoView.prototype.setClipPx = function (top, width, height, left)
{
    this.div.style.clip = "rect(" + top + "px " + width + "px " + height + "px " + left + "px)";
}

PhotoView.prototype.setLeftPx = function (left)
{
    this.div.style.left = left + "px";
}

PhotoView.prototype.setTopPx = function (top)
{
    this.div.style.top = top + "px";
}

PhotoView.prototype.setClipToMax = function ()
{
    var style = document.defaultView.getComputedStyle(this.box, "");

    this.div.style.clip = "rect(0px " + style.width + " " + style.height + " 0px)";
}

PhotoView.prototype.resetSizeAndPosition = function ()
{
    this.div.style.left = "0px";
    this.div.style.top = "0px";
    this.setClipToMax();
}

PhotoView.prototype.setOpacity = function (opacity)
{
    this.div.style.opacity = opacity;
}

/* ------------------- */

SimpleAnimation = function (oncomplete)
{
    this.duration = 500;
    this.from = 0.0;
    this.to = 1.0;

    if (oncomplete != null) {
        this.oncomplete = oncomplete;
    }
}

SimpleAnimation.prototype.animationComplete = function ()
{
    delete this.animation;
    delete this.animator;

    this.post();

    if (this.oncomplete != null) {
        this.oncomplete();
    }
}

SimpleAnimation.prototype.stop = function ()
{
    if (this.animation != null) {
        this.animator.stop();
        this.post();
        delete this.animation;
        delete this.animator;
    }
}

SimpleAnimation.prototype.start = function ()
{
    this.stop();

    this.pre();

    var self = this;

    var animator = new AppleAnimator(this.duration, 13);
    animator.oncomplete = function () { self.animationComplete(); };
    this.animator = animator;

    var update = function (animation, now, first, done) {
        self.update(now);
    }
    this.animation = new AppleAnimation(this.from, this.to, update);
    animator.addAnimation(this.animation);
    animator.start();
}

SimpleAnimation.prototype.pre = function ()
{
    // Override for pre-animation setup
}

SimpleAnimation.prototype.post = function ()
{
    // Override for post-animation cleanup
}

SimpleAnimation.prototype.update = function (now) {
    // Action goes here
}

/* ------------------- */

function TransitionEffect(current, next, oncomplete)
{
    this.current = current;
    this.next = next;
    this.oncomplete = oncomplete;

    this.effects = [
        { name: "Zufällig", method: "random" }, // 0
        { name: "Sprung zu", method: "jump" }, // 1
        { name: "Überblenden", method: "fade" }, // 2
        { name: "Wischen", directions: [ // 3
            { name: "Rechts", method: "wipeRight" }, // 3, 0
            { name: "Links", method: "wipeLeft" }, // 3, 1
            { name: "Abwärts", method: "wipeDown" }, // 3, 2
            { name: "Aufwärts", method: "wipeUp" }, // 3, 3
            { name: "Eintreffend", method: "wipeIn"}, // 3, 4
            { name: "Abgehend", method: "wipeOut" } ] }, // 3, 5
        { name: "Schließen", directions: [ // 4
            { name: "Horizontal", method: "wipeCloseHoriz" }, // 4, 0
            { name: "Vertikal", method: "wipeCloseVert" } ] }, // 4, 1
        { name: "Öffnen", directions: [ // 5
            { name: "Horizontal", method: "wipeOpenHoriz" }, // 5, 0
            { name: "Vertikal", method: "wipeOpenVert" } ] }, // 5, 1
        { name: "Wegziehen", directions: [ // 6
            { name: "Rechts", method: "slideOffRight" }, // 6, 0
            { name: "Links", method: "slideOffLeft" }, // 6, 1
            { name: "Abwärts", method: "slideOffDown" }, // 6, 2
            { name: "Aufwärts", method: "slideOffUp" } ] }, // 6, 3
        { name: "Aufschieben", directions: [ // 7
            { name: "Rechts", method: "slideOnRight" }, // 7, 0
            { name: "Links", method: "slideOnLeft" }, // 7, 1
            { name: "Abwärts", method: "slideOnDown" }, // 7, 2
            { name: "Aufwärts", method: "slideOnUp" } ] }, // 7, 3
        { name: "Verschieben", directions: [ // 8
            { name: "Rechts", method: "pushRight" }, // 8, 0
            { name: "Links", method: "pushLeft" }, // 8, 1
            { name: "Abwärts", method: "pushDown" }, // 8, 2
            { name: "Aufwärts", method: "pushUp" } ] }// 8, 3
    ];
}

TransitionEffect.prototype.doEffect = function (effect)
{
    this[effect]();
}

TransitionEffect.prototype.random = function ()
{
    var effect;
    do {
        var num = Math.floor(Math.random() * this.effects.length);
        effect = this.effects[num];
    } while (effect.method == "random" || effect.method == "jump");

    var method = effect.method;
    if (effect.directions != null) {
        var num = Math.floor(Math.random() * effect.directions.length);
        method = effect.directions[num].method;
    }

    this.doEffect(method);
}

TransitionEffect.prototype.animationComplete = function ()
{
    delete this.animation;

    if (this.oncomplete != null) {
        this.oncomplete();
    }
}

TransitionEffect.prototype.jump = function ()
{
    this.stop();

    this.next.upperShown();
    this.current.lowerHidden();
    this.animationComplete();
}

TransitionEffect.prototype.fade = function ()
{
    this.stop();

    var self = this;

    this.animation = new SimpleAnimation(function () { self.animationComplete(); });

    this.animation.pre = function ()
    {
        self.current.upperShown();
        self.next.lowerShown();
        self.current.setOpacity(1.0);
        self.next.setOpacity(1.0);
    }
    this.animation.post = function ()
    {
        self.next.upperShown();
        self.next.setOpacity(1.0);
        self.current.lowerHidden();
        self.current.setOpacity(1.0);
    }
    this.animation.update = function (now)
    {
        self.current.setOpacity(1.0 - now);
    }

    this.animation.start();
}

TransitionEffect.prototype.doWipe = function (wiper, inFlag)
{
    this.stop();

    var self = this;

    this.animation = new SimpleAnimation(function () { self.animationComplete(); });

    this.animation.pre = function ()
    {
        self.current.resetSizeAndPosition();
        self.width = parseInt(self.current.div.style.width);
        self.height = parseInt(self.current.div.style.height);
        if (inFlag) {
            wiper.call(self, self.animation.from);
            self.next.upperShown();
            self.current.lowerShown();
        }
        else {
            self.current.upperShown();
            self.next.lowerShown();
        }
    }
    this.animation.post = function ()
    {
        self.next.upperShown();
        self.next.resetSizeAndPosition();
        self.current.lowerHidden();
        self.current.resetSizeAndPosition();
    }
    this.animation.update = function (now)
    {
        wiper.call(self, now);
    }

    this.animation.start();
}

TransitionEffect.prototype.wipeRight = function ()
{
    this.doWipe(function (now)
    {
        this.current.setClipPx(0, this.width, this.height, now * this.width);
    });
}

TransitionEffect.prototype.wipeLeft = function ()
{
    this.doWipe(function (now)
    {
        this.current.setClipPx(0, this.width - now * this.width, this.height, 0);
    });
}

TransitionEffect.prototype.wipeDown = function ()
{
    this.doWipe(function (now)
    {
        this.current.setClipPx(now * this.height, this.width, this.height, 0);
    });
}

TransitionEffect.prototype.wipeUp = function ()
{
    this.doWipe(function (now)
    {
        this.current.setClipPx(0, this.width, this.height - now * this.height, 0);
    });
}

TransitionEffect.prototype.wipeIn = function ()
{
    this.doWipe(function (now)
    {
        var x = this.width * (1 - now) / 2;
        var y = this.height * (1 - now) / 2;
        this.next.setClipPx(y, this.width - x, this.height - y, x);
    }, true);
}

TransitionEffect.prototype.wipeOut = function ()
{
    this.doWipe(function (now)
    {
        var x = this.width * now / 2;
        var y = this.height * now / 2;
        this.current.setClipPx(y, this.width - x, this.height - y, x);
    });
}

TransitionEffect.prototype.wipeCloseHoriz = function ()
{
    this.doWipe(function (now)
    {
        var x = this.width * now / 2;
        this.current.setClipPx(0, this.width - x, this.height, x);
    });
}

TransitionEffect.prototype.wipeCloseVert = function ()
{
    this.doWipe(function (now)
    {
        var y = this.height * now / 2;
        this.current.setClipPx(y, this.width, this.height - y, 0);
    });
}

TransitionEffect.prototype.wipeOpenHoriz = function ()
{
    this.doWipe(function (now)
    {
        var x = this.width * (1 - now) / 2;
        this.next.setClipPx(0, this.width - x, this.height, x);
    }, true);
}

TransitionEffect.prototype.wipeOpenVert = function ()
{
    this.doWipe(function (now)
    {
        var y = this.height * (1 - now) / 2;
        this.next.setClipPx(y, this.width, this.height - y, 0);
    }, true);
}

TransitionEffect.prototype.slideOffRight = function ()
{
    this.doWipe(function (now)
    {
        var x = now * this.width;
        this.current.setClipPx(0, this.width - x, this.height, 0);
        this.current.setLeftPx(x);
    });
}

TransitionEffect.prototype.slideOffLeft = function ()
{
    this.doWipe(function (now)
    {
        var x = now * this.width;
        this.current.setClipPx(0, this.width, this.height, x);
        this.current.setLeftPx(-x);
    });
}

TransitionEffect.prototype.slideOffDown = function ()
{
    this.doWipe(function (now)
    {
        var y = now * this.height;
        this.current.setClipPx(0, this.width, this.height - y, 0);
        this.current.setTopPx(y);
    });
}

TransitionEffect.prototype.slideOffUp = function ()
{
    this.doWipe(function (now)
    {
        var y = now * this.width;
        this.current.setClipPx(y, this.width, this.height, 0);
        this.current.setTopPx(-y);
    });
}

TransitionEffect.prototype.slideOnRight = function ()
{
    this.doWipe(function (now)
    {
        var x = (1 - now) * this.width;
        this.next.setClipPx(0, this.width, this.height, x);
        this.next.setLeftPx(-x);
    }, true);
}

TransitionEffect.prototype.slideOnLeft = function ()
{
    this.doWipe(function (now)
    {
        var x = now * this.width;
        this.next.setClipPx(0, x, this.height, 0);
        this.next.setLeftPx(this.width - x);
    }, true);
}

TransitionEffect.prototype.slideOnDown = function ()
{
    this.doWipe(function (now)
    {
        var y = (1 - now) * this.height;
        this.next.setClipPx(y, this.width, this.height, 0);
        this.next.setTopPx(-y);
    }, true);
}

TransitionEffect.prototype.slideOnUp = function ()
{
    this.doWipe(function (now)
    {
        var y = now * this.height;
        this.next.setClipPx(0, this.width, y, 0);
        this.next.setTopPx(this.height - y);
    }, true);
}

TransitionEffect.prototype.pushRight = function ()
{
    this.doWipe(function (now)
    {
        var x = now * this.width;
        this.current.setClipPx(0, this.width - x, this.height, 0);
        this.current.setLeftPx(x);
        this.next.setClipPx(0, this.width, this.height, this.width - x);
        this.next.setLeftPx(x - this.width);
    });
}

TransitionEffect.prototype.pushLeft = function ()
{
    this.doWipe(function (now)
    {
        var x = now * this.width;
        this.current.setClipPx(0, this.width, this.height, x);
        this.current.setLeftPx(-x);
        this.next.setClipPx(0, x, this.height, 0);
        this.next.setLeftPx(this.width - x);
    });
}

TransitionEffect.prototype.pushDown = function ()
{
    this.doWipe(function (now)
    {
        var y = now * this.height;
        this.current.setClipPx(0, this.width, this.height - y, 0);
        this.current.setTopPx(y);
        this.next.setClipPx(this.height - y, this.width, this.height, 0);
        this.next.setTopPx(y - this.height);
    });
}

TransitionEffect.prototype.pushUp = function ()
{
    this.doWipe(function (now)
    {
        var y = now * this.height;
        this.current.setClipPx(y, this.width, this.height, 0);
        this.current.setTopPx(-y);
        this.next.setClipPx(0, this.width, y, 0);
        this.next.setTopPx(this.height - y);
    });
}

TransitionEffect.prototype.stop = function ()
{
    if (this.animation != null) {
        this.animation.stop();
        delete this.animation;
    }
}

/* ------------------- */

function Slideshow(container, photos, onchange)
{
    this.displayTimeValues = [
        { value: "0", text: "Manuell"},
        { value: "1", text: "Sekündlich"},
        { value: "5", text: "Alle 5 Sekunden"},
        { value: "30", text: "Alle 30 Sekunden"},
        { value: "60", text: "Minütlich"},
        { value: "900", text: "Alle 15 Minuten"},
        { value: "1800", text: "Alle 30 Minuten"},
        { value: "3600", text: "Stündlich"},
        { value: "86400", text: "Täglich"}];

    this.current = { view: new PhotoView(container) };
    this.prev = { view: new PhotoView(container) };
    this.next = { view: new PhotoView(container) };
    this.current.view.upperShown();
    this.prev.view.lowerShown();
    this.next.view.lowerHidden();

    this.photos = photos;
    this.onchange = onchange;

    this.paused = true;
    this.photoDuration = 5000;
    this.currentPhotoNumber = 0;
    this.selectedTransition = "random";
    this.lastPhotoChange = new Date();
}

Slideshow.prototype.transitionComplete = function (number)
{
    delete this.transition;

    if (this.onchange != null) {
        this.onchange(number);
    }
}

Slideshow.prototype.showPhotoNumber = function (number)
{
    this.cancelNextPhotoTimer();

    if (this.transition != null) {
        this.transition.stop();
        delete this.transition;
    }

    var transitionTime = 500;

    var current = this.current;
    var prev = this.prev;
    var next = this.next;

    if (next.photo !== this.photos[number]) {
        if (prev.photo === this.photos[number]) {
            next = prev;
        }
        else {
            next.photo = this.photos[number];
            next.view.setImage(next.photo.image);
        }
    }

    var self = this;
    this.transition = new TransitionEffect(current.view, next.view, function () { self.transitionComplete(number); });
    // If photos are advancing very quickly, use a jump transition
    if ((new Date()).getTime() - this.lastPhotoChange.getTime() < transitionTime) {
        this.transition.jump();
    }
    else {
        this.transition.doEffect(this.selectedTransition);
    }

    this.currentPhotoNumber = number;
    this.lastPhotoChange = new Date();

    this.current = next;

    // Preloading
    if (next === prev) {
        this.prev = this.next;
        this.next = current;
        // Went backwards - preload previous
        this.prev.photo = this.photos[this.prevPhotoNumber()];
        this.prev.view.setImage(this.prev.photo.image);
    }
    else {
        this.prev = current;
        this.next = prev;
        this.next.photo = this.photos[this.nextPhotoNumber()];
        this.next.view.setImage(this.next.photo.image);
    }

    this.startNextPhotoTimer();
}

Slideshow.prototype.start = function ()
{
    this.paused = false;
    this.showPhotoNumber(0);
}

Slideshow.prototype.pause = function ()
{
    if (!this.paused) {
        this.paused = true;
        this.cancelNextPhotoTimer();
    }
}

Slideshow.prototype.resume = function ()
{
    if (this.paused) {
        this.paused = false;
        this.startNextPhotoTimer();
    }
}

Slideshow.prototype.startNextPhotoTimer = function ()
{
    if (this.paused) {
        return;
    }

    if (this.nextPhotoTimer != null) {
        alert("trying to set overlapping timer");
        return;
    }

    var self = this;

    var timedAdvance = function ()
    {
        delete self.nextPhotoTimer;
        self.advance();
    }

    if (this.photoDuration) {
        this.nextPhotoTimer = setTimeout(timedAdvance, this.photoDuration);
    }
}

Slideshow.prototype.cancelNextPhotoTimer = function ()
{
    if (this.nextPhotoTimer != null) {
        clearTimeout(this.nextPhotoTimer);
        delete this.nextPhotoTimer;
    }
}

Slideshow.prototype.halt   = Slideshow.prototype.cancelNextPhotoTimer;
Slideshow.prototype.unhalt = Slideshow.prototype.startNextPhotoTimer;

Slideshow.prototype.nextPhotoNumber = function ()
{
    var number = this.currentPhotoNumber + 1;
    if (number >= this.photos.length) {
        number = 0;
    }

    return number;
}

Slideshow.prototype.prevPhotoNumber = function ()
{
    var number = this.currentPhotoNumber - 1;
    if (number < 0) {
        number = this.photos.length - 1;
    }

    return number;
}

Slideshow.prototype.advance = function ()
{
    this.showPhotoNumber(this.nextPhotoNumber());
}

Slideshow.prototype.goBack = function ()
{
    this.showPhotoNumber(this.prevPhotoNumber());
}

Slideshow.prototype.getDisplayTimeValues = function ()
{
    return this.displayTimeValues;
}

Slideshow.prototype.getAvailableTransitions = function ()
{
    var te = new TransitionEffect;
    return te.effects;
}

Slideshow.prototype.setTransitionIndex = function (effectId, directionId)
{
    var effects = this.getAvailableTransitions();
    var effect = effects[effectId];
    if (effect != null) {
        if (effect.directions == null) {
            if (effect.method != null) {
                this.selectedTransition = effect.method;
            }
        }
        else {
            var dir = effect.directions[directionId];
            if (dir != null && dir.method != null) {
                this.selectedTransition = dir.method;
            }
        }
    }
}
